/*:
 ## Упражнение для приложения — пользователи и дистанция
 
 >Эти упражнения закрепляют понимание Swift в контексте фитнес-приложения.
 
 Большинству приложений необходимо иметь структуру данных для хранения информации о пользователе. Создайте структуру `User`, свойства которой будут хранить базовую информацию о пользователе. Как минимум, она должна содержать информацию об имени, возрасте, росте, весе и уровне активности пользователя. Вы можете хранить `name` в виде `String`, `age` в виде `Int`, `height` и `weight` в виде `Double` и `activityLevel` в виде `Int`, который может принимать значения 1-10 от самого низкого до самого высокого уровня активности. Реализуйте данную структуру ниже.
 */
struct User {
    var name = String()
    var age = Int()
    var hight = Double()
    var weight = Double()
    var activityLevel = Int()
}

/*:
 Создайте экземпляр переменной типа `User` и дайте ему своё имя. Используйте поэлементный инициализатор для передачи информации о себе. Затем выведите описание экземпляра вашей переменной типа `User`, используя её свойства.
 */
var Marina  = User(name: "Марина", age: 24, hight: 168, weight: 56, activityLevel: 7)

print("Пользователь : \(Marina.name), \(Marina.age) года. Рост - \(Marina.hight), вес - \(Marina.weight). \nУровень активности равен \(Marina.activityLevel).")
/*:
 В предыдущих упражнениях для приложения, вы представляли расстояние в виде обычного числа. Однако, оно может быть представлено с помощью различных единиц измерения. Создайте структуру `Distance`, которая будет хранить дистанцию в различных системах измерения. Как минимум, у вас должно быть свойство `meters` (метры) и свойство `feet` (футы). Создайте собственные инициализаторы (конструкторы), соответствующие каждому из свойств (например, если у вас только два свойства для метров и футов, у вас должно быть два конструктора), которые будут принимать дистанцию в одной системе измерения и присваивать корректные значения всем свойствам. Подсказка: *1 метр = 3.28084 фута*.
 
 - Пример: если вы используете инициализатор для метров и передаёте ему дистанцию 1600, конструктор должен установить `meters` равным 1600, а `feet` — равным 5249.344.
 */
struct Distance {
    var meters = Double()
    var feet = Double()
    
    init(meters: Double) {
        self.meters = meters
        self.feet = meters *  3.28084
    }
    
    init(feet: Double) {
        self.feet = feet
        self.meters = feet / 3.28084
    }
}

/*:
 Создайте экземпляр структуры `Distance` с именем `mile`. Используя инициализтор для метров, установите её значение равным 1600. Выведите в консоль свойство для футов и удостоверьтесь, что оно равно 5249.344.
 */
var mile = Distance(meters: 1600)
print(mile.feet, mile.meters)


/*:
 Создайте ещё один экземпляр `Distance` и присвойте ему произвольное значение. Удостовертесь, что оба свойства установлены корректно.
 */
var myDistance = Distance(feet:456)
print(myDistance.feet, myDistance.meters)

//: [Ранее](@previous)  |  страница 4 из 10  |  [Далее: упражнение — методы](@next)
